"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stockLoader = exports.fetchStocksAll = void 0;
var axios_1 = __importDefault(require("axios"));
var DataLoader = require("dataloader");
var node_html_parser_1 = require("node-html-parser");
var common_1 = require("./common");
var fetchStocksByPage = function (pageNo) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (0, axios_1.default)({
                method: 'POST',
                url: 'https://edge.pse.com.ph/companyDirectory/search.ax',
                data: "pageNo=".concat(pageNo, "&companyId=&keyword=&sortType=&dateSortType=DESC&cmpySortType=ASC&symbolSortType=ASC&sector=ALL&subsector=ALL"),
            })
                .then(function (v) { return (0, node_html_parser_1.parse)(v.data); })
                .then(function (v) { return v.querySelector('.list'); })
                .then(function (v) { return v === null || v === void 0 ? void 0 : v.querySelectorAll('tbody>tr'); })
                .then(function (nodes) {
                if (nodes) {
                    return nodes.map(function (node) {
                        var a = node.querySelector('a');
                        if (a) {
                            var _a = a.rawAttributes.onclick.split(/\(|\)/)[1].replace(/'/g, '').split(','), companyId = _a[0], securityId = _a[1];
                            var _b = node
                                .querySelectorAll('td')
                                .map(function (v) { return v.innerText; }), secName = _b[0], symbol = _b[1], sector = _b[2], subSector = _b[3], listingDate = _b[4];
                            return {
                                securityId: securityId,
                                companyId: companyId,
                                secName: (0, common_1.unEntity)(secName),
                                symbol: symbol,
                                sector: sector,
                                subSector: (0, common_1.unEntity)(subSector),
                                listingDate: new Date(listingDate),
                            };
                        }
                    });
                }
                return [];
            })];
    });
}); };
var fetchStocksAll = function () { return __awaiter(void 0, void 0, void 0, function () {
    var stocks, pageNo, newStocks;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                stocks = [];
                pageNo = 1;
                _a.label = 1;
            case 1:
                if (!true) return [3 /*break*/, 3];
                return [4 /*yield*/, fetchStocksByPage(pageNo)];
            case 2:
                newStocks = _a.sent();
                if (newStocks.length <= 1) {
                    return [3 /*break*/, 3];
                }
                newStocks.forEach(function (s) { return s && stocks.push(s); });
                pageNo++;
                return [3 /*break*/, 1];
            case 3: return [2 /*return*/, stocks];
        }
    });
}); };
exports.fetchStocksAll = fetchStocksAll;
exports.stockLoader = new DataLoader(function (symbols) { return __awaiter(void 0, void 0, void 0, function () {
    var stocks, dict;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.fetchStocksAll)()];
            case 1:
                stocks = _a.sent();
                dict = new Map(stocks.map(function (s) { return [s.symbol, s]; }));
                return [2 /*return*/, symbols.map(function (s) { return dict.get(s.toUpperCase()); })];
        }
    });
}); });
