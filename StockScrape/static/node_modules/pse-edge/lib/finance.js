"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFinancialReports = void 0;
var axios_1 = __importDefault(require("axios"));
var node_html_parser_1 = require("node-html-parser");
var directory_1 = require("./directory");
/**
 * Gets financial reports of a ticker symbol from PSE Edge.
 * @param sym Ticker Symbol (e.g. GLO, TEL, ALI)
 * @returns PseFinancial
 */
var getFinancialReports = function (sym) { return __awaiter(void 0, void 0, void 0, function () {
    var stock;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, directory_1.stockLoader.load(sym)];
            case 1:
                stock = _a.sent();
                if (stock === null || stock === void 0 ? void 0 : stock.companyId) {
                    return [2 /*return*/, axios_1.default
                            .get("https://edge.pse.com.ph/companyPage/financial_reports_view.do?cmpy_id=".concat(stock.companyId))
                            .then(function (v) { return (0, node_html_parser_1.parse)(v.data); })
                            .then(function (html) {
                            var _a = html.querySelectorAll('table'), bs1y = _a[0], is1y = _a[1], bs1q = _a[2], is1q = _a[3];
                            var bs1yRows = getTable(bs1y);
                            var bs1qRows = getTable(bs1q);
                            var is1yrows = getTable(is1y);
                            var is1qrows = getTable(is1q);
                            return {
                                annual: {
                                    balanceSheet: {
                                        CurrentYear: getBalanceSheet(0, bs1yRows),
                                        PreviousYear: getBalanceSheet(1, bs1yRows),
                                    },
                                    incomeStatement: {
                                        CurrentYear: getIncomeStatement(0, is1yrows),
                                        PreviousYear: getIncomeStatement(1, is1yrows),
                                    },
                                },
                                quarterly: {
                                    balanceSheet: {
                                        CurrentYear: getBalanceSheet(0, bs1qRows),
                                        PreviousYear: getBalanceSheet(1, bs1qRows),
                                    },
                                    incomeStatement: {
                                        CurrentYear: getIncomeStatement(0, is1qrows),
                                        PreviousYear: getIncomeStatement(1, is1qrows),
                                        CurrentYearToDate: getIncomeStatement(2, is1qrows),
                                        PreviousYearToDate: getIncomeStatement(3, is1qrows),
                                    },
                                },
                            };
                        })];
                }
                throw new Error("".concat(sym, " not found"));
        }
    });
}); };
exports.getFinancialReports = getFinancialReports;
var getTable = function (w) {
    return w.querySelectorAll('tr').map(function (tr) { return tr.querySelectorAll('td').map(function (v) { return toNumber(v.innerText); }); });
};
var getIncomeStatement = function (col, rows) {
    var _a = rows.map(function (row) { return row[col]; }), GrossRevenue = _a[0], GrossExpense = _a[1], IncomeBeforeTax = _a[2], NetIncomeAfterTax = _a[3], NetIncomeAttributableToParent = _a[4], EarningsPerShareBasic = _a[5], EarningsPerShareDiluted = _a[6];
    return {
        GrossRevenue: GrossRevenue,
        GrossExpense: GrossExpense,
        IncomeBeforeTax: IncomeBeforeTax,
        NetIncomeAfterTax: NetIncomeAfterTax,
        NetIncomeAttributableToParent: NetIncomeAttributableToParent,
        EarningsPerShareBasic: EarningsPerShareBasic,
        EarningsPerShareDiluted: EarningsPerShareDiluted,
    };
};
var getBalanceSheet = function (col, rows) {
    var _a = rows.map(function (row) { return row[col]; }), GrossRevenue = _a[0], GrossExpense = _a[1], IncomeBeforeTax = _a[2], NetIncomeAfterTax = _a[3], NetIncomeAttributableToParent = _a[4], EarningsPerShareBasic = _a[5], EarningsPerShareDiluted = _a[6];
    return {
        GrossRevenue: GrossRevenue,
        GrossExpense: GrossExpense,
        IncomeBeforeTax: IncomeBeforeTax,
        NetIncomeAfterTax: NetIncomeAfterTax,
        NetIncomeAttributableToParent: NetIncomeAttributableToParent,
        EarningsPerShareBasic: EarningsPerShareBasic,
        EarningsPerShareDiluted: EarningsPerShareDiluted,
    };
};
var toNumber = function (v) {
    if (v) {
        if (/\(|\)/.test(v)) {
            // negative
            return -parseFloat(v.replace(/\(|\)|\,|\s/g, ''));
        }
        return parseFloat(v.replace(/\(|\)|\,|\s/g, ''));
    }
};
